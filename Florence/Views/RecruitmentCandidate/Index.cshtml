@model IEnumerable<Florence.RecruitmentCandidate>

@using GridMvc.Html
@{
    ViewBag.Title = "Index";
    var gridName = Model.GetType().FullName + "Grid";
}

<p>
    @Html.ActionLink("Create New", "Create")
</p>

<div class="row">
    <div class="col-lg-12">
        <div class="wrapper wrapper-content animated fadeInUp">
            <div class="ibox">
                <div class="ibox-content">
                    <div class="row">
                        <div class="col-lg-12">
                            @(Html.Kendo().Grid<Florence.RecruitmentCandidate>(Model)
                                .Name("RecruitmentCandidateGrid")
                                .Columns(columns =>
                                {
                                    columns.Bound(c => c.Name)
                                      .Width(240);
                                    columns.Bound(c => c.Gender);
                                    columns.Bound(c => c.DOB).Format("{0: MM/dd/yy}");
                                    columns.Bound(c => c.Country).Width(150);
                                    columns.Bound(c => c.JobField);
                                    columns.Bound(c => c.HaveWorkingPermit);
                                    columns.Bound(c => c.Email);
                                })
                                .HtmlAttributes(new { style = "height: 550px;" })
                                .Scrollable()
                                .Groupable()
                                .Sortable()
                                .Pageable(pageable => pageable
                                    .Refresh(true)
                                    .PageSizes(true)
                                    .ButtonCount(5))
                            //.DataSource(dataSource => dataSource
                            //    .Ajax()
                            //    .Read(read => read.Action("Customers_Read", "Grid"))
                            //    .PageSize(20)
                            //)
                            )




                            @*@Html.Grid(Model).Named(gridName).Columns(columns =>
                       {
                       var exceptionList = Florence.Models.GridColumnsExceptionModel.GetColumnException(Model.GetType().GetProperty("Item").PropertyType);

                       foreach (var prop in Model.GetType().GetProperty("Item").PropertyType.GetProperties().Where(x => !exceptionList.Contains(x.Name)))
                       {
                           if (prop.Name.Equals("id"))
                           {
                               columns.Add(x => x.id).Titled("id");
                           }
                           else
                           {
                               columns.Add(prop).Titled(DisplayNameHelper.GetDisplayName(prop));
                           }

                       }
                       columns.Add()
                                .Encoded(false)
                                .Sanitized(false)
                                .SetWidth(30)
                                .Titled("Edit")
                                .RenderValueAs(x => @<a class="btn btn-sm" href="@Url.Action("Edit", new { id = x.id})"><i class="fa fa-pencil"></i></a>);

                       columns.Add()
                                .Encoded(false)
                                .Sanitized(false)
                                .SetWidth(30)
                                .Titled("Details")
                                .RenderValueAs(x => @<a class="btn btn-sm" href="@Url.Action("Details", new { id = x.id})"><i class="fa fa-file-text"></i></a>);
                       }

                           ).WithPaging(20)*@
                        </div>

                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

