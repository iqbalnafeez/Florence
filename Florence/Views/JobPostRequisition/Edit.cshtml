@model Florence.JobPostRequisition

@{
    ViewBag.Title = "Edit";
}

<h2>Edit</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <h4>JobPostRequisition</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.id)

        <div class="form-group">
            @Html.LabelFor(model => model.Department, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.DepartmentSID, new SelectList(AdminDepartment.GetAll(), "id", "Name"), new { @class = "form-control m-b" })
                @Html.ValidationMessageFor(model => model.Department, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.JobTitle, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.JobTitle, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.JobTitle, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.JobType, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.JobType, new SelectList(ModelTypes.GetTypes(ModelTypesKeys.JobTypes)), new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.JobType, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.NumberOfPositions, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.NumberOfPositions, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.NumberOfPositions, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.CandidateAgeRangeStart, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.CandidateAgeRangeStart, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.CandidateAgeRangeStart, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.CandidateAgeRangeEnd, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.CandidateAgeRangeEnd, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.CandidateAgeRangeEnd, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.JobLocation, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.JobLocation, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.JobLocation, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.SalaryStartRange, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.SalaryStartRange, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.SalaryStartRange, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.SalaryEndRange, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.SalaryEndRange, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.SalaryEndRange, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="ibox-content no-padding">
                @Html.LabelFor(model => model.CandidateQualification, htmlAttributes: new { @class = "control-label col-md-2" })

                @(Html.Kendo().EditorFor(x => x.CandidateQualification)
      .Name("CandidateQualification")
      .HtmlAttributes(new { style = "height:440px" })
      .Resizable(resizable => resizable.Content(true).Toolbar(true))
      .Value(HttpUtility.HtmlDecode( Model.CandidateQualification))
                )
                @Html.ValidationMessageFor(model => model.CandidateQualification, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="ibox-content no-padding">
                @Html.LabelFor(model => model.CandidateExperience, htmlAttributes: new { @class = "control-label col-md-2" })

                
                @(Html.Kendo().EditorFor(x => x.CandidateExperience)
      .Name("CandidateExperience")
      .HtmlAttributes(new { style = "height:440px" })
      .Resizable(resizable => resizable.Content(true).Toolbar(true))
      .Value(HttpUtility.HtmlDecode( Model.CandidateExperience))
                )
            </div>
        </div>

        <div class="form-group">
            <div class="ibox-content no-padding">
                @Html.LabelFor(model => model.JobPostDescription, htmlAttributes: new { @class = "control-label col-md-2" })

                
                @(Html.Kendo().EditorFor(x => x.JobPostDescription)
      .Name("JobPostDescription")
      .HtmlAttributes(new { style = "height:440px" })
      .Resizable(resizable => resizable.Content(true).Toolbar(true))
      .Value(HttpUtility.HtmlDecode( Model.JobPostDescription))
                )
            </div>
        </div>



        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

<script>
    $(document).ready(function () {
        genericInit();
    });
</script>

@section Scripts {


    

    <script type="text/javascript">
                $(document).ready(function () {
                    
                    
                    

                });

    </script>
}

@section Styles {
    
}


