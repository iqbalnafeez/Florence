@model IEnumerable<Florence.ReimbursementDetail>

@using GridMvc.Html
@{
    ViewBag.Title = "Index";
    var gridName = Model.GetType().FullName + "Grid";
}

<p>
    @Html.ActionLink("Create New", "Create")
</p>

<div class="row">
    <div class="col-lg-12">
        <div class="wrapper wrapper-content animated fadeInUp">
            <div class="ibox">
                <div class="ibox-content">
                    <div class="row">
                        <div class="col-lg-12">
                            @Html.Grid(Model).Named(gridName).Columns(columns =>
                       {
                       var exceptionList = Florence.Models.GridColumnsExceptionModel.GetColumnException(Model.GetType().GetProperty("Item").PropertyType);

                       foreach (var prop in Model.GetType().GetProperty("Item").PropertyType.GetProperties().Where(x => !exceptionList.Contains(x.Name)))
                       {
                           if (prop.Name.Equals("id"))
                           {
                               columns.Add(x => x.id).Titled("id");
                           }
                           else
                           {
                               columns.Add(prop).Titled(DisplayNameHelper.GetDisplayName(prop));
                           }

                       }
                       columns.Add()
                                .Encoded(false)
                                .Sanitized(false)
                                .SetWidth(30)
                                .Titled("Edit")
                                .RenderValueAs(x => @<a class="btn btn-sm" href="@Url.Action("Edit", new { id = x.id})"><i class="fa fa-pencil"></i></a>);

                       columns.Add()
                                .Encoded(false)
                                .Sanitized(false)
                                .SetWidth(30)
                                .Titled("Details")
                                .RenderValueAs(x => @<a class="btn btn-sm" href="@Url.Action("Details", new { id = x.id})"><i class="fa fa-file-text"></i></a>);
                       }

                           ).WithPaging(20)
                        </div>

                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


<table class="table">
    <tr>
        <th>
            @Html.DisplayNameFor(model => model.InstanceID)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.CreatedDate)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Category)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Item)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.ReceiptNumber)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Location)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Amount)
        </th>
        <th></th>
    </tr>

@foreach (var item in Model) {
    <tr>
        <td>
            @Html.DisplayFor(modelItem => item.InstanceID)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.CreatedDate)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.Category)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.Item)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.ReceiptNumber)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.Location)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.Amount)
        </td>
        <td>
            @Html.ActionLink("Edit", "Edit", new { id=item.id }) |
            @Html.ActionLink("Details", "Details", new { id=item.id }) |
            @Html.ActionLink("Delete", "Delete", new { id=item.id })
        </td>
    </tr>
}

</table>
