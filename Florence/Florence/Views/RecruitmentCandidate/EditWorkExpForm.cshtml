@model Florence.CandidateWorkExperience
    @{ 
        if (string.IsNullOrEmpty(Model.JobDescription))
        {
            Model.JobDescription = "";
        }
    }

@using (Html.BeginForm(null, null, FormMethod.Post, new { id = "editWorkExpForm" }))
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <h4>Candidate Work Experience</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        
        <div class="row">
            <div class="col-md-3">
                @Html.LabelFor(model => model.JobField, htmlAttributes: new { @class = "control-label " })
                <div class="">
                    @Html.EditorFor(model => model.JobField, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.JobField, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-3">
                @Html.LabelFor(model => model.OrganizationName, htmlAttributes: new { @class = "control-label " })
                <div class="">
                    @Html.EditorFor(model => model.OrganizationName, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.OrganizationName, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-3">
                @Html.LabelFor(model => model.Designation, htmlAttributes: new { @class = "control-label " })
                <div class="">
                    @Html.EditorFor(model => model.Designation, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Designation, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-md-3">
                @Html.LabelFor(model => model.StartDate, htmlAttributes: new { @class = "control-label " })
                <div class="">
                    @(Html.Kendo().DatePickerFor(x => x.StartDate)
              .Name("StartDate")
              .Value(DateTime.Today)
              .HtmlAttributes(new { style = "width: 100%" })
                    )
                    @Html.ValidationMessageFor(model => model.StartDate, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-3">
                @Html.LabelFor(model => model.EndDate, htmlAttributes: new { @class = "control-label " })
                <div class="">
                    @(Html.Kendo().DatePickerFor(x => x.EndDate)
              .Name("EndDate")
              .Value(DateTime.Today)
              .HtmlAttributes(new { style = "width: 100%" })
                    )
                    @Html.ValidationMessageFor(model => model.EndDate, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-3">

            </div>
        </div>

        <div class="row">
            <div class="col-md-11">
                @Html.LabelFor(model => model.JobDescription, htmlAttributes: new { @class = "control-label " })
                <div class="">
                    @(Html.Kendo().EditorFor(x => x.JobDescription)
      .Name("JobDescription")
      .HtmlAttributes(new { style = "height:440px" })
      .Resizable(resizable => resizable.Content(true).Toolbar(true))
      .Value(HttpUtility.HtmlDecode(Model.JobDescription))
                    )
                </div>

            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 ">
                <input type="button" id="btnEditWorkExpFormId" value="Create" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<script>
    $(document).ready(function () {

        //$('#StartDate').datepicker({
        //    todayBtn: "linked",
        //    keyboardNavigation: false,
        //    forceParse: false,
        //    calendarWeeks: true,
        //    autoclose: true
        //});

        //$('#EndDate').datepicker({
        //    todayBtn: "linked",
        //    keyboardNavigation: false,
        //    forceParse: false,
        //    calendarWeeks: true,
        //    autoclose: true
        //});

        $("#btnEditWorkExpFormId").click(function (e) {
            var obj = {
                LinkID: $("#LinkID").val(),
                JobField: $("#editWorkExpForm #JobField").val(),
                OrganizationName: $("#OrganizationName").val(),
                Designation: $("#Designation").val(),
                StartDate: $("#StartDate").data("kendoDatePicker").value().toISOString(),
                EndDate: $("#EndDate").data("kendoDatePicker").value().toISOString(),
                JobDescription: $("#JobDescription").val()

            }
            _workExpArr.push(obj);
            if (_workExpArr.length == 1) {
                generateWorkExpGrid();
            } else {
                //reloadWorkExpGrid();
                reloadGridData("workExpGrid", _workExpArr)
            }
            
            $("#" + _addWorkExp).data("kendoWindow").close();
        });


        
    });


</script>